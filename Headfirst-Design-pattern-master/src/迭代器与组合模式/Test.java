package 迭代器与组合模式;

/**
 * 迭代器与组合模式--管理良好的集合
 *
 * 如何能让客户遍历你的对象而又无法窥探你存储对象的方式？
 * 如何创建一些对象超集合。
 *
 * 迭代器模式：提供一种方法顺序访问一个聚合对象中的各个元素，又不暴露内部结构。
 * 单一责任原则：一个类应该只有一个引起变化的原因(只做一件事)（一个类承担的职责越多，那么它将来可能需要改变的地方也就越多，这回带来许多错误。）
 *      解释：看菜单类，为什么我要返回一个迭代器？我在菜单类内部实现迭代器的功能不就好了吗？不。
 *      这样这个类就有两个责任，如果集合改变，这个类也必须改变。
 * 高内聚，低耦合？ 内聚：度量一个类或模块紧密地达到单一目的。当一个模块或一堆类被设计成只支持一组相关功能时，我们说它门是高内聚的。
 *
 * ----为什么要有设计模式？因为我们人脑的思考方式是固定的，统一的。如果将来人工智能可以编程，那么将不需要设计模式。
 *
 * 关于Collection Framework，包括ArrayList，Vector，LinkedList，Stack和PriorityQueue。这些类都实现了java.util.Collection接口。方便操作一群对象
 *
 * java5后，提供了foreach的遍历方式，我们更少有机会见到迭代器了。
 *
 *
 *
 * 组合模式中，演示了内部迭代器和外部迭代器，外部迭代器理解起来比较困难，不过记住个大概就好了。
 *
 */
public class Test {
}
